import json
from copy import deepcopy

from vkbottle.bot import Blueprint, Message
from vkbottle import PhotoMessageUploader
from vkbottle.tools import Text

from app.loader import db, ctx
from app.keyboards import menu_kb
from app.image_app import create_face, create_haircut
from .main_menu import profile
from .admin_panel import is_admin
from app import states

bp = Blueprint()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
@bp.on.private_message(text=["–ù–∞—á–∞—Ç—å"])
async def start(message: Message):
    if not (await db.request(f"SELECT * FROM users WHERE vk_id = '{message.from_id}'", "result")):
        photo = await PhotoMessageUploader(bp.api).upload('files/images/start.png')

        await bp.api.messages.send(
            peer_id=message.from_id,
            message='–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∫–æ–∂–∏',
            keyboard=menu_kb.register_keyboard,
            attachment=photo,
            random_id=0)

        await bp.state_dispenser.set(message.peer_id, states.RegisterState.SKIN)
    else:
        kb = deepcopy(menu_kb.main_menu_keyboard)
        if is_admin(message.from_id):
            kb.row()
            kb.add(Text('üé® –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', payload={'admin': 'panel'}))
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§®", keyboard=kb)


# –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∫–æ–∂–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bp.on.private_message(state=states.RegisterState.SKIN)
async def choose_skin(message: Message):
    if message.payload:
        answer = json.loads(message.payload)["choice"]
        ctx.set("skin", answer)

        photo = await PhotoMessageUploader(bp.api).upload(await create_face(answer))

        await bp.api.messages.send(
            peer_id=message.from_id,
            message='–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Ü–æ',
            keyboard=menu_kb.register_keyboard,
            attachment=photo,
            random_id=0)

        await bp.state_dispenser.set(message.peer_id, states.RegisterState.FACE)
    else:
        await message.answer(message="‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", keyboard=menu_kb.register_keyboard)


# –í—ã–±–æ—Ä –ª–∏—Ü–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bp.on.private_message(state=states.RegisterState.FACE)
async def choose_face(message: Message):
    if message.payload:
        answer = json.loads(message.payload)["choice"]
        ctx.set("face", answer)

        photo = await PhotoMessageUploader(bp.api).upload(await create_haircut(skin=ctx.get("skin"), face=answer))

        await bp.api.messages.send(
            peer_id=message.from_id,
            message='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–µ—Å–∫—É',
            keyboard=menu_kb.register_keyboard,
            attachment=photo,
            random_id=0)

        await bp.state_dispenser.set(message.peer_id, states.RegisterState.HAIRCUT)
    else:
        await message.answer(message="‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", keyboard=menu_kb.register_keyboard)


# –í—ã–±–æ—Ä –ø—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bp.on.private_message(state=states.RegisterState.HAIRCUT)
async def choose_haircut(message: Message):
    if message.payload:
        answer = json.loads(message.payload)["choice"]
        ctx.set("haircut", answer)

        await message.answer('–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è')
        await bp.state_dispenser.set(message.peer_id, states.RegisterState.NICKNAME)
    else:
        await message.answer(message="‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", keyboard=menu_kb.register_keyboard)


# –í—ã–±–æ—Ä –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bp.on.private_message(state=states.RegisterState.NICKNAME, text='<nickname>')
async def choose_nickname(message: Message, nickname=None):
    if len(nickname) > 16:
        await message.answer('‚ùó –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤')
    else:
        await db.request(
            'INSERT INTO users (vk_id, skin, face, haircut, nickname) '
            f'VALUES ({message.from_id}, {ctx.get("skin")}, {ctx.get("face")}, {ctx.get("haircut")}, "{nickname}")'
        )
        ctx.storage.clear()

        await bp.state_dispenser.delete(message.peer_id)
        await profile(message)
