from tortoise.expressions import Q
from vkbottle.bot import Message
from vkbottle.framework.labeler import BotLabeler
from vkbottle.modules import json

from config import bot
from games.keyboards import games_menu_keyboard
from images import convert_image_to_bytes_io, upload_image
from users.images import create_profile_image
from users.models import UserModel, BackgroundColorModel
from users.utils import get_user_name
from admin.models import QuestionModel
from .images import create_color_choice_image
from .keyboards import main_menu_keyboard, shop_menu_keyboard, income_menu_keyboard, settings_menu_keyboard, \
    back_to_settings_keyboard, back_to_menu_keyboard
from .states import ContactSupportState, SettingsState
from .utils import generate_choice_keyboard_with_pagination, get_main_menu_keyboard

bl = BotLabeler()


@bl.private_message(payload={'menu': 'back'})
async def back_to_menu(message: Message):
    await message.answer("üéà –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", keyboard=get_main_menu_keyboard(message.from_id))


@bl.private_message(payload={'menu': 'profile'})
async def show_profile(
        message: Message,
        text='üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å',
        keyboard=None
):
    user = await UserModel.get(vk_id=message.from_id)
    user = await user.convert_to_dataclass()
    vk_user_name = await get_user_name(message.from_id)
    image = create_profile_image(
        user=user,
        vk_user_name=vk_user_name
    )
    image = await upload_image(convert_image_to_bytes_io(image))

    if keyboard is None:
        keyboard = get_main_menu_keyboard(message.from_id)

    await message.answer(
        message=text,
        attachment=image,
        keyboard=keyboard
    )


@bl.private_message(payload={'menu': 'shop'})
async def show_shop_menu(message: Message):
    await message.answer(
        '‚úè –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n'
        '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n'
        'üìº –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã\n'
        '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏–Ω–æ—Å—è—Ç –ø—Ä–∏–±—ã–ª—å.'
        '–ß–µ–º –¥–æ—Ä–æ–∂–µ –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã, —Ç–µ–º –≤—ã—à–µ –¥–æ—Ö–æ–¥',
        keyboard=shop_menu_keyboard
    )


@bl.private_message(payload={'menu': 'income'})
async def show_income_menu(message: Message):
    await message.answer(
        '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å üíµ?\n\n'
        'üí∏ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n'
        '–†–∞–∑ –≤ —Å—É—Ç–∫–∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–π –±–æ–Ω—É—Å!\n\n\n'
        'üî® –†–∞–±–æ—Ç–∞\n'
        '–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏!\n\n\n'
        'üñ• –ú–∞–π–Ω–∏–Ω–≥ - —Ñ–µ—Ä–º—ã:\n'
        '–ü–æ–∫—É–ø–∞–π—Ç–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏–Ω–æ—Å—è—Ç –ø—Ä–∏–±—ã–ª—å!',
        keyboard=income_menu_keyboard
    )


@bl.private_message(payload={'menu': 'games'})
async def games(message: Message):
    await message.answer('üïπ –°–ø–∏—Å–æ–∫ –∏–≥—Ä', keyboard=games_menu_keyboard)


@bl.private_message(payload={'menu': 'help'})
async def contact_support(message: Message):
    await message.answer('‚úè –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', keyboard=back_to_menu_keyboard)
    await bot.state_dispenser.set(message.peer_id, ContactSupportState.QUESTION)


@bl.private_message(state=ContactSupportState.QUESTION, text='<text>')
async def submit_question(message: Message, text=None):
    if text == '‚óÄ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.state_dispenser.delete(message.peer_id)
        await back_to_menu(message)
    elif len(text) > 512:
        await message.answer(
            '‚ùó –î–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 512 —Å–∏–º–≤–æ–ª–æ–≤!',
            keyboard=back_to_menu_keyboard
        )
    else:
        user = await UserModel.get(vk_id=message.from_id)
        await QuestionModel.create(text=text, from_user=user)
        await message.answer(
            'üí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
            keyboard=get_main_menu_keyboard(message.from_id)
        )
        await bot.state_dispenser.delete(message.peer_id)


@bl.private_message(payload={'menu': 'settings'})
async def show_settings_menu(message: Message):
    await message.answer(
        '–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–æ–Ω',
        keyboard=settings_menu_keyboard
    )


@bl.private_message(payload={'settings': 'change_name'})
async def change_name(message: Message):
    await message.answer('üßê –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è', keyboard=back_to_settings_keyboard)
    await bot.state_dispenser.set(message.peer_id, SettingsState.NAME)


@bl.private_message(state=SettingsState.NAME, text='<text>')
async def set_new_name(message: Message, text=None):
    if text == '‚óÄ‚öô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        await message.answer('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', keyboard=settings_menu_keyboard)
        await bot.state_dispenser.delete(message.from_id)
    elif len(text) > 16:
        await message.answer('‚ùó –î–ª–∏–Ω–∞ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤')
    else:
        await UserModel.filter(vk_id=message.from_id).update(nickname=text)
        await show_profile(
            message, text=f'–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{text}¬ª', keyboard=main_menu_keyboard)
        await bot.state_dispenser.delete(message.from_id)


@bl.private_message(payload={'settings': 'change_background'})
async def show_change_background_page(message: Message, page_number: int = 1):
    colors = await BackgroundColorModel.filter(
        Q(pk__gte=page_number * 3 - 2) & Q(pk__lte=page_number * 3 + 1)
    )

    choice_numbers = [color.pk for color in colors[:3]]

    keyboard = generate_choice_keyboard_with_pagination(
        numbers=choice_numbers,
        prev_page=(page_number > 1),
        next_page=(len(colors) == 4),
        back_label='‚óÄ‚öô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
    )

    image = create_color_choice_image(
        colors=[color.hex for color in colors[:3]],
        choice_numbers=choice_numbers)
    image = await upload_image(convert_image_to_bytes_io(image))

    await message.answer(
        'üé® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞' if page_number == 1 else '',
        attachment=image,
        keyboard=keyboard
    )
    await bot.state_dispenser.set(
        message.from_id,
        SettingsState.BACKGROUND,
        current_page=page_number,
        keyboard=keyboard
    )


@bl.private_message(state=SettingsState.BACKGROUND)
async def set_new_background(message: Message):
    state_payload = message.state_peer.payload
    if not message.payload:
        return await message.answer(
            message='‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!',
            keyboard=state_payload['keyboard']
        )

    choice = json.loads(message.payload)['choice']
    if choice == 'back':
        await bot.state_dispenser.delete(message.from_id)
        await show_settings_menu(message)
    elif choice == 'prev_page':
        await show_change_background_page(message, state_payload['current_page'] - 1)
    elif choice == 'next_page':
        await show_change_background_page(message, state_payload['current_page'] + 1)
    else:
        await UserModel.filter(vk_id=message.from_id).update(background_color_id=choice)
        await bot.state_dispenser.delete(message.peer_id)
        await show_profile(message, text='üé® –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞')
