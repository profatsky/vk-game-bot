import json
import random
from datetime import datetime

from tortoise.exceptions import DoesNotExist
from vkbottle import Keyboard
from vkbottle.bot import Message
from vkbottle.framework.labeler import BotLabeler

from config import admin_list, bot, ADMIN_GRADES, USER_STATUSES
from menu.utils import generate_choice_keyboard_with_pagination
from users.handlers import start
from users.models import UserModel
from users.utils import get_clickable_user_name
from .models import QuestionModel
from .keyboards import admin_menu_keyboard, support_menu_keyboard, back_to_support_menu_keyboard, back_to_questions_list
from .states import UnansweredQuestionsState, AnsweredQuestionsState

bl = BotLabeler()


@bl.private_message(payload={'menu': 'admin'})
async def open_admin_menu(message: Message):
    await message.answer('üóù –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', keyboard=admin_menu_keyboard)


@bl.private_message(payload={'admin': 'admin_list'})
async def show_admin_list(message: Message):
    text = 'üìë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n'
    for vk_id, status in admin_list.storage.items():
        text += f'{ADMIN_GRADES[status]["emoji"]} {status} - {await get_clickable_user_name(vk_id)}\n'
    await message.answer(text, keyboard=admin_menu_keyboard)


@bl.private_message(payload={'admin': 'support'})
async def show_support_menu(message: Message):
    await message.answer('‚òé –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏', keyboard=support_menu_keyboard)


@bl.private_message(payload={'support': 'unanswered'})
async def show_unanswered_questions(message: Message, questions: list = None, page_number: int = 0):
    text = f'üìÉ –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number + 1}'

    if not questions:
        questions = await QuestionModel.filter(answer=None)
    number_of_questions = len(questions)

    if not number_of_questions:
        return await message.answer(
            'üòï –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø—É—Å—Ç',
            keyboard=support_menu_keyboard
        )

    questions_ids = []
    for q in questions[page_number * 3:page_number * 3 + 3]:
        questions_ids.append(q.pk)
        text += f'\n\nüîπ‚Ññ{q.pk}' \
                f'üí¨ {q.text}\n' \
                f'üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {await get_clickable_user_name((await q.from_user).vk_id)}'

    kb = generate_choice_keyboard_with_pagination(
        numbers=questions_ids,
        prev_page=(page_number > 0),
        next_page=True if number_of_questions - (page_number * 3 + 3) > 0 else False,
        back_label='‚óÄ‚Åâ –û–±—Ä–∞—â–µ–Ω–∏—è'
    )
    await message.answer(text, keyboard=kb)
    await bot.state_dispenser.set(
        message.from_id,
        UnansweredQuestionsState.SHOW_UNANSWERED_QUESTIONS,
        questions=questions,
        number_of_questions=number_of_questions,
        current_page=page_number,
        keyboard=kb
    )


@bl.private_message(state=UnansweredQuestionsState.SHOW_UNANSWERED_QUESTIONS)
async def choose_question_to_answer(message: Message):
    state_payload = message.state_peer.payload
    if not message.payload:
        return await message.answer(
            message='‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!',
            keyboard=state_payload['keyboard']
        )

    choice = json.loads(message.payload)['choice']
    if choice == 'back':
        await bot.state_dispenser.delete(message.from_id)
        await show_support_menu(message)
    elif choice == 'prev_page':
        await show_unanswered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] - 1
        )
    elif choice == 'next_page':
        await show_unanswered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] + 1
        )
    else:
        await bot.state_dispenser.set(
            message.from_id,
            UnansweredQuestionsState.ANSWER_QUESTION,
            question_id=choice
        )
        await message.answer(
            f'üìû –î–ª—è –æ—Ç–≤–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å ‚Ññ{choice}\n\n'
            f'‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏',
            keyboard=back_to_support_menu_keyboard
        )


@bl.private_message(state=UnansweredQuestionsState.ANSWER_QUESTION, text='<text>')
async def answer_question(message: Message, text=None):
    if text == '‚óÄ‚òé –û–±—Ä–∞—â–µ–Ω–∏—è':
        await bot.state_dispenser.delete(message.from_id)
        await show_support_menu(message)
    elif len(text) > 512:
        await message.answer(
            '‚ùó –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 512 —Å–∏–º–≤–æ–ª–æ–≤!',
            keyboard=back_to_support_menu_keyboard
        )
    else:
        question = await QuestionModel.get(pk=message.state_peer.payload['question_id'])
        question.answer = text
        question.answered_by = await UserModel.get(vk_id=message.from_id)
        question.answered_at = datetime.now()
        await question.save(update_fields=['answer', 'answered_by_id', 'answered_at'])
        await bot.state_dispenser.delete(message.from_id)
        await message.answer('‚úî –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', keyboard=support_menu_keyboard)

        await bot.api.messages.send(
            user_id=(await question.from_user).vk_id,
            random_id=random.randint(1, 2 ** 32),
            message='‚ú® –ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n\n'
                    f'üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {text}\nüëî –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {await get_clickable_user_name(message.from_id)}'
        )


@bl.private_message(payload={'support': 'answered'})
async def show_answered_questions(message: Message, questions: list = None, page_number: int = 0):
    text = f'üìÉ –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number + 1}'

    if not questions:
        questions = await QuestionModel.exclude(answer=None)
    number_of_questions = len(questions)

    if not number_of_questions:
        return await message.answer(
            'üòï –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø—É—Å—Ç',
            keyboard=support_menu_keyboard
        )

    questions_ids = []
    for q in questions[page_number * 3:page_number * 3 + 3]:
        questions_ids.append(q.pk)
        text += f'\n\nüîπ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{q.pk}\n' \
                f'üí¨ –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {q.text}\n' \
                f'üë§ –û—Ç–ø—Ä–∞–≤–∏–ª: {await get_clickable_user_name((await q.from_user).vk_id)}\n' \
                f'üëî –û—Ç–≤–µ—Ç–∏–ª: {await get_clickable_user_name((await q.answered_by).vk_id)}'

    kb = generate_choice_keyboard_with_pagination(
        numbers=questions_ids,
        prev_page=(page_number > 0),
        next_page=True if number_of_questions - (page_number * 3 + 3) > 0 else False,
        back_label='‚óÄ‚Åâ –û–±—Ä–∞—â–µ–Ω–∏—è'
    )
    await message.answer(text, keyboard=kb)
    await bot.state_dispenser.set(
        message.from_id,
        AnsweredQuestionsState.SHOW_ANSWERED_QUESTIONS,
        questions=questions,
        number_of_questions=number_of_questions,
        current_page=page_number,
        keyboard=kb
    )


@bl.private_message(state=AnsweredQuestionsState.SHOW_ANSWERED_QUESTIONS)
async def choose_question_to_get_info(message: Message):
    state_payload = message.state_peer.payload
    if not message.payload:
        return await message.answer(
            message='‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!',
            keyboard=state_payload['keyboard']
        )

    choice = json.loads(message.payload)['choice']
    if choice == 'back':
        await bot.state_dispenser.delete(message.from_id)
        await show_support_menu(message)
    elif choice == 'current_page':
        await show_answered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page']
        )
    elif choice == 'prev_page':
        await show_answered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] - 1
        )
    elif choice == 'next_page':
        await show_answered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] + 1
        )
    else:
        question = await QuestionModel.get(pk=choice)

        await message.answer(
            f'üìë –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ ‚Ññ{choice}\n\n'
            f'üí¨ –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {question.text}\n'
            f'üë§ –û—Ç–ø—Ä–∞–≤–∏–ª: {await get_clickable_user_name((await question.from_user).vk_id)}\n'
            f'üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {question.created_at.strftime("%X %x")}\n\n'
            f'üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {question.answer}\n'
            f'üëî –û—Ç–≤–µ—Ç–∏–ª: {await get_clickable_user_name((await question.answered_by).vk_id)}\n'
            f'üïó –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {question.answered_at.strftime("%X %x")}\n\n'
            '‚ùó –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π',
            keyboard=back_to_questions_list
        )


@bl.private_message(payload={'support': 'answered_by_me'})
async def show_questions_answered_by_me(message: Message):
    questions = await QuestionModel.filter(
        answer__isnull=False,
        answered_by=await UserModel.get(
            vk_id=message.from_id
        )
    )
    await show_answered_questions(message, questions)


@bl.private_message(payload={'admin': 'stats'})
async def show_admin_stats(message: Message):
    user = await UserModel.get(vk_id=message.from_id)
    questions = await QuestionModel.filter(answered_by=user.pk).count()
    await message.answer(
        f'üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {await get_clickable_user_name(message.from_id)}\n\n'
        f'{ADMIN_GRADES[user.status]["emoji"]} –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç—É—Å: {user.status}\n'
        f'‚òé –ö–æ–ª-–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {questions}\n',
        keyboard=admin_menu_keyboard
    )


@bl.private_message(payload={'admin': 'commands'})
async def show_admin_commands_list(message: Message):
    admin = await UserModel.get(vk_id=message.from_id)
    admin_lvl = ADMIN_GRADES[admin.status]['lvl']

    text = ''
    for grade in ADMIN_GRADES.values():
        if grade['lvl'] <= admin_lvl:
            for command in grade['commands']:
                text += f'\n{command}'

    await message.answer(
        f'üõ† –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n{text}' if text else 'üòï –î–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
        keyboard=admin_menu_keyboard
    )


@bl.private_message(text='/setstatus <vk_id> <lvl>')
async def set_user_status(message: Message, vk_id: str = None, lvl: str = None):
    appointing_admin = await UserModel.get(vk_id=message.from_id)
    if appointing_admin.status == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
        return await start(message)

    appointing_admin_lvl = ADMIN_GRADES[appointing_admin.status]['lvl']

    if not vk_id.isdigit() or not lvl.isdigit() or '0' in (vk_id, lvl):
        return await message.answer(
            '‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏!',
            keyboard=admin_menu_keyboard
        )
    vk_id, lvl = int(vk_id), int(lvl)

    if vk_id == message.from_id:
        return await message.answer(
            '‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!',
            keyboard=admin_menu_keyboard
        )

    try:
        appointee = await UserModel.get(vk_id=vk_id)
    except DoesNotExist:
        return await message.answer('‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
    appointee_lvl = ADMIN_GRADES.get(appointee.status)
    if appointee_lvl is None:
        appointee_lvl = 0

    if appointee_lvl >= appointing_admin_lvl or appointing_admin_lvl <= lvl:
        return await message.answer('‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!', keyboard=admin_menu_keyboard)

    if appointee_lvl == lvl:
        return await message.answer(
            '‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å!',
            keyboard=admin_menu_keyboard
        )

    appointee.status = USER_STATUSES[lvl]
    await appointee.save(update_fields=['status'])

    if lvl > 1:
        admin_list.set(vk_id, appointee.status)
    else:
        admin_list.delete(vk_id)

    await message.answer(
        f'‚úî –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {await get_clickable_user_name(vk_id)} –Ω–∞ ¬´{appointee.status}¬ª!',
        keyboard=admin_menu_keyboard
    )

    emoji = '‚è´' if appointee_lvl < lvl else '‚è¨'
    await bot.api.messages.send(
        user_id=vk_id,
        random_id=random.randint(1, 2 ** 32),
        message=f'{emoji} {appointing_admin.status} {await get_clickable_user_name(message.from_id)} '
                f'–∏–∑–º–µ–Ω–∏–ª –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ ¬´{appointee.status}¬ª!'
    )


@bl.private_message(text='/givemoney <vk_id> <money>')
async def give_money_to_user(message: Message, vk_id: str = None, money: str = None):
    admin = await UserModel.get(vk_id=message.from_id)

    if admin.status == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
        return await start(message)

    if not vk_id.isdigit() or not money.isdigit() or '0' in (vk_id, money):
        return await message.answer(
            '‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏!',
            keyboard=admin_menu_keyboard
        )
    vk_id, money = int(vk_id), int(money)

    try:
        recipient = await UserModel.get(vk_id=vk_id)
    except DoesNotExist:
        return await message.answer('‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

    if admin.status not in ('–ì–ª.–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å'):
        return await message.answer(
            '‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ '
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´–ì–ª.–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª –∏–ª–∏ ¬´–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å¬ª!',
            keyboard=admin_menu_keyboard
        )

    recipient.balance += money
    await recipient.save(update_fields=['balance'])

    await message.answer(
        f'‚úî –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {await get_clickable_user_name(recipient.vk_id)} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${money}!',
        keyboard=admin_menu_keyboard
    )

    await bot.api.messages.send(
        user_id=vk_id,
        random_id=random.randint(1, 2 ** 32),
        message=f'üí∏ {admin.status} {await get_clickable_user_name(message.from_id)} '
                f'–ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ ${money}!'
    )


@bl.private_message(text='/setmoney <vk_id> <money>')
async def set_money_for_user(message: Message, vk_id: str = None, money: str = None):
    admin = await UserModel.get(vk_id=message.from_id)

    if admin.status == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
        return await start(message)

    if not vk_id.isdigit() or not money.isdigit() or '0' in (vk_id, money):
        return await message.answer(
            '‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏!',
            keyboard=admin_menu_keyboard
        )
    vk_id, money = int(vk_id), int(money)

    try:
        recipient = await UserModel.get(vk_id=vk_id)
    except DoesNotExist:
        return await message.answer('‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

    if admin.status not in ('–ì–ª.–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å'):
        return await message.answer(
            '‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ '
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´–ì–ª.–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª –∏–ª–∏ ¬´–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å¬ª!',
            keyboard=admin_menu_keyboard
        )

    recipient.balance = money
    await recipient.save(update_fields=['balance'])

    await message.answer(
        f'‚úî –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {await get_clickable_user_name(recipient.vk_id)} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${money}!',
        keyboard=admin_menu_keyboard
    )

    await bot.api.messages.send(
        user_id=vk_id,
        random_id=random.randint(1, 2 ** 32),
        message=f'üíµ {admin.status} {await get_clickable_user_name(message.from_id)} '
                f'–∏–∑–º–µ–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ ${money}!'
    )


@bl.private_message(text='/del <vk_id>')
async def del_user_account(message: Message, vk_id: str = None):
    admin = await UserModel.get(vk_id=message.from_id)

    if admin.status == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
        return await start(message)

    if not vk_id.isdigit():
        return await message.answer(
            '‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–µ–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!',
            keyboard=admin_menu_keyboard
        )
    vk_id = int(vk_id)

    try:
        user = await UserModel.get(vk_id=vk_id)
    except DoesNotExist:
        return await message.answer('‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

    if admin.status != '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å':
        return await message.answer(
            '‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ '
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å¬ª!',
            keyboard=admin_menu_keyboard
        )

    await user.delete()

    await message.answer(
        f'‚úî –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {await get_clickable_user_name(user.vk_id)} —É–¥–∞–ª—ë–Ω!',
        keyboard=admin_menu_keyboard
    )

    await bot.api.messages.send(
        user_id=vk_id,
        random_id=random.randint(1, 2 ** 32),
        message=f'‚ùó‚ùå {admin.status} {await get_clickable_user_name(message.from_id)} —É–¥–∞–ª–∏–ª –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!',
        keyboard=Keyboard()
    )
    