import json
from datetime import datetime

from vkbottle.bot import Message
from vkbottle.framework.labeler import BotLabeler

from config import admin_list, bot
from menu.models import QuestionModel
from menu.utils import generate_choice_keyboard_with_pagination
from users.models import UserModel
from .keyboards import admin_menu_keyboard, support_menu_keyboard, back_to_support_menu_keyboard, back_to_questions_list
from .states import UnansweredQuestionsState, AnsweredQuestionsState

bl = BotLabeler()


@bl.private_message(payload={'menu': 'admin'})
async def open_admin_menu(message: Message):
    await message.answer('üóù –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', keyboard=admin_menu_keyboard)


@bl.private_message(payload={'admin': 'admin_list'})
async def show_admin_list(message: Message):
    text = 'üìë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n'
    status_emoji = {'–•–µ–ª–ø–µ—Ä': 'ü¶∫', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 'üëî', '–ì–ª.–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 'üé©', '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å': 'üëë'}
    for vk_id, status in admin_list.storage.items():
        user = (await bot.api.users.get(user_id=vk_id))[0]
        text += f'{status_emoji[status]} {status} - [id{user.id}|{user.first_name} {user.last_name}]\n'
    await message.answer(text, keyboard=admin_menu_keyboard)


@bl.private_message(payload={'admin': 'support'})
async def show_support_menu(message: Message):
    await message.answer('‚òé –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏', keyboard=support_menu_keyboard)


@bl.private_message(payload={'support': 'unanswered'})
async def show_unanswered_questions(message: Message, questions: list = None, page_number: int = 0):
    text = f'üìÉ –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number + 1}'

    if not questions:
        questions = await QuestionModel.filter(answer=None)
    number_of_questions = len(questions)

    questions_ids = []
    for q in questions[page_number * 3:page_number * 3 + 3]:
        questions_ids.append(q.pk)
        user = (await bot.api.users.get(user_id=(await q.from_user).vk_id))[0]
        text += f'\n\nüîπ‚Ññ{q.pk}' \
                f'üí¨ {q.text}\n' \
                f'üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [id{user.id}|{user.first_name} {user.last_name}]'

    kb = generate_choice_keyboard_with_pagination(
        numbers=questions_ids,
        prev_page=(page_number > 0),
        next_page=True if number_of_questions - (page_number * 3 + 3) > 0 else False,
        back_label='‚óÄ‚Åâ –û–±—Ä–∞—â–µ–Ω–∏—è'
    )
    await message.answer(text, keyboard=kb)
    await bot.state_dispenser.set(
        message.from_id,
        UnansweredQuestionsState.SHOW_UNANSWERED_QUESTIONS,
        questions=questions,
        number_of_questions=number_of_questions,
        current_page=page_number,
        keyboard=kb
    )


@bl.private_message(state=UnansweredQuestionsState.SHOW_UNANSWERED_QUESTIONS)
async def choose_question_to_answer(message: Message):
    state_payload = message.state_peer.payload
    if not message.payload:
        return await message.answer(
            message='‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!',
            keyboard=state_payload['keyboard']
        )

    choice = json.loads(message.payload)['choice']
    if choice == 'back':
        await bot.state_dispenser.delete(message.from_id)
        await show_support_menu(message)
    elif choice == 'prev_page':
        await show_unanswered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] - 1
        )
    elif choice == 'next_page':
        await show_unanswered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] + 1
        )
    else:
        await bot.state_dispenser.set(
            message.from_id,
            UnansweredQuestionsState.ANSWER_QUESTION,
            question_id=choice
        )
        await message.answer(
            f'üìû –î–ª—è –æ—Ç–≤–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å ‚Ññ{choice}\n\n'
            f'‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏',
            keyboard=back_to_support_menu_keyboard
        )


@bl.private_message(state=UnansweredQuestionsState.ANSWER_QUESTION, text='<text>')
async def answer_question(message: Message, text=None):
    if text == '‚óÄ‚òé –û–±—Ä–∞—â–µ–Ω–∏—è':
        await bot.state_dispenser.delete(message.from_id)
        await show_support_menu(message)
    elif len(text) > 512:
        await message.answer(
            '‚ùó –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 512 —Å–∏–º–≤–æ–ª–æ–≤!',
            keyboard=back_to_support_menu_keyboard
        )
    else:
        question = await QuestionModel.get(pk=message.state_peer.payload['question_id'])
        question.answer = text
        question.answered_by = await UserModel.get(vk_id=message.from_id)
        question.answered_at = datetime.now()
        await question.save(update_fields=['answer', 'answered_by_id', 'answered_at'])
        await bot.state_dispenser.delete(message.from_id)
        await message.answer('‚úî –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', keyboard=support_menu_keyboard)

        admin = (await bot.api.users.get(user_id=message.from_id))[0]
        await bot.api.messages.send(
            user_id=(await question.from_user).vk_id,
            random_id=0,
            message='‚ú® –ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n\n'
                    f'üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {text}\nüëî –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [id{admin.id}|{admin.first_name} {admin.last_name}]'
        )


@bl.private_message(payload={'support': 'answered'})
async def show_answered_questions(message: Message, questions: list = None, page_number: int = 0):
    text = f'üìÉ –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number + 1}'

    if not questions:
        questions = await QuestionModel.exclude(answer=None)
    number_of_questions = len(questions)

    questions_ids = []
    for q in questions[page_number * 3:page_number * 3 + 3]:
        questions_ids.append(q.pk)
        user = (await bot.api.users.get(user_id=(await q.from_user).vk_id))[0]
        admin = (await bot.api.users.get(user_id=(await q.answered_by).vk_id))[0]
        text += f'\n\nüîπ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{q.pk}\n' \
                f'üí¨ –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {q.text}\n' \
                f'üë§ –û—Ç–ø—Ä–∞–≤–∏–ª: [id{user.id}|{user.first_name} {user.last_name}]\n' \
                f'üëî –û—Ç–≤–µ—Ç–∏–ª: [id{admin.id}|{admin.first_name} {admin.last_name}]'

    kb = generate_choice_keyboard_with_pagination(
        numbers=questions_ids,
        prev_page=(page_number > 0),
        next_page=True if number_of_questions - (page_number * 3 + 3) > 0 else False,
        back_label='‚óÄ‚Åâ –û–±—Ä–∞—â–µ–Ω–∏—è'
    )
    await message.answer(text, keyboard=kb)
    await bot.state_dispenser.set(
        message.from_id,
        AnsweredQuestionsState.SHOW_ANSWERED_QUESTIONS,
        questions=questions,
        number_of_questions=number_of_questions,
        current_page=page_number,
        keyboard=kb
    )


@bl.private_message(state=AnsweredQuestionsState.SHOW_ANSWERED_QUESTIONS)
async def choose_question_to_get_info(message: Message):
    state_payload = message.state_peer.payload
    if not message.payload:
        return await message.answer(
            message='‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!',
            keyboard=state_payload['keyboard']
        )

    choice = json.loads(message.payload)['choice']
    if choice == 'back':
        await bot.state_dispenser.delete(message.from_id)
        await show_support_menu(message)
    elif choice == 'current_page':
        await show_answered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page']
        )
    elif choice == 'prev_page':
        await show_answered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] - 1
        )
    elif choice == 'next_page':
        await show_answered_questions(
            message,
            questions=state_payload['questions'],
            page_number=state_payload['current_page'] + 1
        )
    else:
        question = await QuestionModel.get(pk=choice)
        user = (await bot.api.users.get(user_id=(await question.from_user).vk_id))[0]
        admin = (await bot.api.users.get(user_id=(await question.answered_by).vk_id))[0]

        await message.answer(
            f'üìë –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ ‚Ññ{choice}\n\n'
            f'üí¨ –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {question.text}\n'
            f'üë§ –û—Ç–ø—Ä–∞–≤–∏–ª: [id{user.id}|{user.first_name} {user.last_name}]\n'
            f'üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {question.created_at.strftime("%X %x")}\n\n'
            f'üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {question.answer}\n'
            f'üëî –û—Ç–≤–µ—Ç–∏–ª: [id{admin.id}|{admin.first_name} {admin.last_name}]\n'
            f'üïó –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {question.answered_at.strftime("%X %x")}\n\n'
            '‚ùó –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π',
            keyboard=back_to_questions_list
        )
