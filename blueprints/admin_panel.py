from vkbottle.bot import Blueprint, Message

from loader import db
from keyboards.admin_kb import admin_keyboard

bp = Blueprint()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–∞—Å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def is_admin(vk_id: int) -> int:
    return await db.request(
        f'SELECT lvl FROM admins WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {vk_id})', 'result')


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def is_registered(vk_id: int) -> int:
    return await db.request(
        request=f"SELECT * FROM users WHERE vk_id = {vk_id}",
        types="result"
    )


# –£–∑–Ω–∞—Ç—å, –∑–∞–Ω–∏–º–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫—É—é-–ª–∏–±–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
async def check_status(vk_id: int) -> str:
    lvl = await db.request(f"SELECT lvl FROM admins WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {vk_id})")
    statuses = {1: "–•–µ–ª–ø–µ—Ä", 2: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", 3: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 4: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", 5: "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å"}
    if lvl:
        return statuses[lvl["lvl"]]
    else:
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'


@bp.on.private_message(payload={'admin': 'panel'})
async def open_admin_panel(event: Message):
    await event.answer('ü§ñ –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', keyboard=admin_keyboard)


@bp.on.private_message(text=['/reports', '/report'])
async def check_reports_via_command(message: Message):
    await check_reports(message)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
@bp.on.private_message(payload={'admin': 'reports'})
async def check_reports(message: Message):
    reports = await db.request(
        request="SELECT vk_id, message FROM reports JOIN users USING (user_id) WHERE is_answered = 0",
        types="fetchmany",
        size=3
    )
    if reports:
        text = "üìí –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π\n\n"
        for count, report in enumerate(reports, start=1):
            user = (await bp.api.users.get(user_id=report['vk_id']))[0]
            text += f"{count}. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id{user.id}|{user.first_name} {user.last_name}]:\n" \
                    f"‚úâ {report['message']}\n‚ùó –î–ª—è –æ—Ç–≤–µ—Ç–∞ - /answer {user.id}\n\n"
        await message.answer(f'{text}')
    else:
        await message.answer(f'üì™ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ—Ç')


# –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bp.on.private_message(text=['/answer <vk_id> <text>', '/answer <vk_id>', '/answer'])
async def answer(message: Message, vk_id=None, text=None):
    if await is_admin(message.from_id):
        if vk_id and text:
            vk_id = int(vk_id)
            report_info = await db.request(
                    request=f"SELECT * FROM reports WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {vk_id}) "
                            f"and is_answered = 0"
            )
            if report_info:
                await bp.api.messages.send(
                    peer_id=vk_id,
                    message=f'‚ùó –ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n'
                            f'‚òé –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {report_info["message"]}\n\n'
                            f'‚úâ–û—Ç–≤–µ—Ç: {text}',
                    random_id=0
                )
                await db.request(f"UPDATE reports SET is_answered = 1 WHERE "
                                 f"user_id = (SELECT user_id FROM users WHERE vk_id = {vk_id}) and is_answered = 0")
            else:
                await message.answer(f'‚ùó –ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        else:
            await message.answer(f'‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /answer <id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>')


@bp.on.private_message(text="/makeadmin <vk_id> <lvl>")
async def make_admin(message: Message, vk_id=None, lvl=None):
    if await is_admin(message.from_id):  # –ø—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
        vk_id, lvl = int(vk_id), int(lvl)
        if await is_registered(vk_id):  # –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            admin_lvl = await db.request(
                f"SELECT lvl FROM admins WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {message.from_id})"
            )['lvl']
            if admin_lvl < 3 or admin_lvl <= lvl:
                await message.answer(
                    "‚ùó –í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
            else:
                candidate = (await bp.api.users.get(user_id=vk_id))[0]
                admin = (await bp.api.users.get(user_id=message.from_id))[0]
                admin_status = await check_status(message.from_id)

                candidate_lvl = await is_admin(vk_id)  # —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if candidate_lvl:  # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω –ø—Ä–∞–≤ —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await db.request(
                        f"UPDATE admins SET lvl = {lvl} "
                        f"WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {vk_id})"
                    )
                    candidate_status = await check_status(vk_id)
                    if candidate_lvl < lvl:  # –ø–æ–≤—ã—à–µ–Ω–∏–µ
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await bp.api.messages.send(
                            peer_id=vk_id,
                            message=f"ü•≥ {admin_status} [id{admin.id}|{admin.first_name} {admin.last_name}] "
                                    f"–ø–æ–≤—ã—Å–∏–ª –≤–∞—Å –¥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {candidate_status}–∞!",
                            random_id=0
                        )
                        # –û—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        await message.answer(
                            f"–í—ã –ø–æ–≤—ã—Å–∏–ª–∏ [id{candidate.id}|{candidate.first_name} {candidate.last_name}] "
                            f"–¥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {candidate_status}–∞ —É—Ä–æ–≤–Ω—è!"
                        )

                    elif candidate_lvl > lvl:  # –ø–æ–Ω–∏–∂–µ–Ω–∏–µ
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await bp.api.messages.send(
                            peer_id=vk_id,
                            message=f"üòï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä [id{admin.id}|{admin.first_name} {admin.last_name}] "
                                    f"–ø–æ–Ω–∏–∑–∏–ª –≤–∞—Å –¥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {lvl} —É—Ä–æ–≤–Ω—è",
                            random_id=0
                        )
                        # –û—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        await message.answer(
                            f"–í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ [id{candidate.id}|{candidate.first_name} {candidate.last_name}] "
                            f"–¥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {lvl} —É—Ä–æ–≤–Ω—è"
                        )
                    else:
                        await message.answer(f"‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –∏–º–µ–µ—Ç {lvl} —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                else:  # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    await db.request(
                        f"INSERT INTO admins (user_id, lvl) "
                        f"VALUES ((SELECT user_id FROM users WHERE vk_id = {vk_id}), {lvl})"
                    )
                    candidate_status = await check_status(vk_id)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bp.api.messages.send(
                        peer_id=vk_id,
                        message=f"ü•≥ {admin_status} [id{admin.id}|{admin.first_name} {admin.last_name}] "
                                f"–Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å  {candidate_status}–∞!",
                        random_id=0
                    )
                    # –û—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    await message.answer(
                        f"–í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ [id{candidate.id}|{candidate.first_name} {candidate.last_name}] "
                        f"–¥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {candidate_status}–∞!"
                    )
        else:
            await message.answer(f"‚ùó –£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ")
    else:
        await message.answer(f"‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
