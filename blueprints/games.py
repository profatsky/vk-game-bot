import json
import random

from vkbottle.bot import Blueprint, Message

from loader import db, ctx
from blueprints.shop import check_balance
from keyboards import games_kb
from keyboards.menu_kb import games_menu_keyboard
from states import BlackJack, Tsuefa, CoinFlip

bp = Blueprint()


# –ò–≥—Ä–∞ "–ë–ª—ç–∫–¥–∂–µ–∫"
@bp.on.private_message(payload={'games': 'blackjack'})
async def start_blackjack(message: Message):
    balance = f"{await check_balance(message.from_id):,}".replace(",", ".")
    await message.answer(
        f'–ò–≥—Ä–∞ BlackjacküÉè\n'
        f'–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} üíµ\n'
        f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏',
        keyboard=games_kb.bet_keyboard
    )
    await bp.state_dispenser.set(message.peer_id, BlackJack.BET)


@bp.on.private_message(state=BlackJack.BET, text="<answer>")
async def bet_blackjack(message: Message, answer=None):
    if answer == '‚óÄ –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä':
        await bp.state_dispenser.delete(message.peer_id)
        await message.answer(f'üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä', keyboard=games_menu_keyboard)
    elif answer == '–ë–µ–∑ —Å—Ç–∞–≤–∫–∏':
        await blackjack(message)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ
        if answer.isdigit():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
            balance = await check_balance(message.from_id)
            answer = int(answer)
            if balance < answer:
                await message.answer(f'‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
            else:
                # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
                ctx.set("bet", answer)
                await db.request(f"UPDATE users SET balance = balance - {answer} WHERE vk_id = {message.from_id}")
                await message.answer(f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {answer} üíµ')
                await blackjack(message)
        else:
            await message.answer(f'‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥', keyboard=games_kb.bet_keyboard)


async def get_card(hand: list):
    while True:
        card_num = random.randint(2, 14)  # –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
        card_suit = random.randint(1, 4)  # –≤—ã–±–æ—Ä –º–∞—Å—Ç–∏

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –∏ –µ—ë –Ω–æ–º–∏–Ω–∞–ª–∞
        if card_num == 11:
            card = '–í–∞–ª–µ—Ç'
            score = 10
        elif card_num == 12:
            card = '–î–∞–º–∞'
            score = 10
        elif card_num == 13:
            card = '–ö–æ—Ä–æ–ª—å'
            score = 10
        elif card_num == 14:
            card = '–¢—É–∑'
            score = 11
        else:
            card = str(card_num)
            score = card_num

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–∏ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏
        suits = {1: ' ‚ô£', 2: ' ‚ô•', 3: ' ‚ô¶', 4: ' ‚ô†'}
        card += suits[card_suit]

        if card in hand:  # –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ —Ç–∞–∫–∞—è —É–∂–µ –±—ã–ª–∞ —Ä–∞–∑—ã–≥—Ä–∞–Ω–∞
            continue
        break

    return card, score


# –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫, –ø–µ—Ä–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
async def blackjack(message: Message):
    player_hand = []
    player_score = 0
    dealer_hand = []
    dealer_score = 0

    # –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–≥—Ä–æ–∫–∞
    card_info = await get_card(hand=[])
    player_hand.append(card_info[0])
    player_score += card_info[1]

    # –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ –∏–≥—Ä–∞
    card_info = await get_card(player_hand)
    player_hand.append(card_info[0])
    player_score += card_info[1]

    # –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–ª–µ—Ä–∞
    card_info = await get_card(dealer_hand)
    dealer_hand.append(card_info[0])
    dealer_score += card_info[1]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CtxStorage
    ctx.set("player_hand", player_hand)
    ctx.set("player_score", player_score)
    ctx.set("dealer_hand", dealer_hand)
    ctx.set("dealer_score", dealer_score)

    await message.answer(
        f"üôã‚Äç‚ôÇ–í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        f"{player_hand[0]}, {player_hand[1]}\n"
        f"–°—á–µ—Ç: {player_score}\n\n"
        f"ü§µ–ö–∞—Ä—Ç—ã –ö—Ä—É–ø—å–µ:\n"
        f"{dealer_hand[0]}\n"
        f"–°—á–µ—Ç: {dealer_score}"
    )

    if player_score >= 21:
        await db.request(f"UPDATE users SET balance = balance + {ctx.get('bet')} * 2 WHERE vk_id = {message.from_id}")
        ctx.storage.clear()
        await bp.state_dispenser.delete(message.peer_id)
        await message.answer(
            'üôÜ‚Äç‚ôÇÔ∏è–ë–ª—ç–∫–¥–∂–µ–∫! –ü–æ–±–µ–¥–∞!\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä',
            keyboard=games_menu_keyboard
        )
    else:
        await message.answer(
            '‚ûï –ï—â–µ - –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É\n‚õî –°–¢–û–ü - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            keyboard=games_kb.blackjack_keyboard
        )
        await bp.state_dispenser.set(message.peer_id, BlackJack.PROGRESS)


# –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –ø—Ä–∏ –∏–≥—Ä–µ –≤ –ë–ª—ç–∫–¥–∂–µ–∫
@bp.on.private_message(state=BlackJack.PROGRESS, payload={"blackjack": "more"})
async def take_more(message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
    player_hand = ctx.get("player_hand")
    player_score = ctx.get("player_score")
    dealer_hand = ctx.get("dealer_hand")
    dealer_score = ctx.get("dealer_score")

    # –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
    card_info = await get_card(hand=player_hand + dealer_hand)
    player_hand.append(card_info[0])
    player_score += card_info[1]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
    ctx.set("player_hand", player_hand)
    ctx.set("player_score", player_score)

    await message.answer(
        f"üôã‚Äç‚ôÇ–í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        f"{', '.join(player_hand)}\n"
        f"–°—á–µ—Ç: {player_score}\n\n"
        f"ü§µ–ö–∞—Ä—Ç—ã –ö—Ä—É–ø—å–µ:\n"
        f"{dealer_hand[0]}\n"
        f"–°—á–µ—Ç: {dealer_score}"
    )

    if player_score == 21:
        await db.request(f"UPDATE users SET balance = balance + {ctx.get('bet')} * 2 WHERE vk_id = {message.from_id}")
        ctx.storage.clear()
        await bp.state_dispenser.delete(message.peer_id)
        await message.answer(
            'üôÜ‚Äç‚ôÇÔ∏è–ë–ª—ç–∫–¥–∂–µ–∫! –ü–æ–±–µ–¥–∞!\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä',
            keyboard=games_menu_keyboard
        )
    elif player_score > 21:
        ctx.storage.clear()
        await bp.state_dispenser.delete(message.peer_id)
        await message.answer(
            f'ü§¶‚Äç‚ôÇÔ∏è–ú–Ω–æ–≥–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä',
            keyboard=games_menu_keyboard
        )
    else:
        await message.answer(
            '‚ûï –ï—â–µ - –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É\n‚õî –°–¢–û–ü - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            keyboard=games_kb.blackjack_keyboard
        )


# –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä–µ—à–∏–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –≤ –ë–ª—ç–∫–¥–∂–µ–∫
@bp.on.private_message(state=BlackJack.PROGRESS, payload={"blackjack": "stop"})
async def stop_blackjack(message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
    player_hand = ctx.get("player_hand")
    player_score = ctx.get("player_score")
    dealer_hand = ctx.get("dealer_hand")
    dealer_score = ctx.get("dealer_score")

    # –î–∏–ª–µ—Ä —Ä–∞–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—ã —Å–µ–±–µ, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 17 –æ—á–∫–æ–≤ –∏–ª–∏ –≤—ã—à–µ
    while dealer_score < 17:
        card_info = await get_card(hand=player_hand + dealer_hand)
        dealer_hand.append(card_info[0])
        dealer_score += card_info[1]

    await message.answer(
        f"üôã‚Äç‚ôÇ–í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        f"{', '.join(player_hand)}\n"
        f"–°—á–µ—Ç: {player_score}\n\n"
        f"ü§µ–ö–∞—Ä—Ç—ã –ö—Ä—É–ø—å–µ:\n"
        f"{', '.join(dealer_hand)}\n"
        f"–°—á–µ—Ç: {dealer_score}"
    )

    # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏–≥—Ä—ã
    if dealer_score > 21 or player_score > dealer_score:
        await db.request(f"UPDATE users SET balance = balance + {ctx.get('bet')} * 2 WHERE vk_id = {message.from_id}")
        await bp.state_dispenser.delete(message.peer_id)
        await message.answer(
            'üôÜ‚Äç‚ôÇÔ∏è–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü–æ–±–µ–¥–∞!\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä',
            keyboard=games_menu_keyboard
        )
    elif dealer_score == player_score:
        await db.request(f"UPDATE users SET balance = balance + {ctx.get('bet')} WHERE vk_id = {message.from_id}")
        await bp.state_dispenser.delete(message.peer_id)
        await message.answer(
            'üíÅ‚Äç‚ôÇÔ∏è–ü—É—à! –ù–∏—á—å—è\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä',
            keyboard=games_menu_keyboard
        )
    else:
        await bp.state_dispenser.delete(message.peer_id)
        await message.answer(
            'ü§¶‚Äç‚ôÇÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä',
            keyboard=games_menu_keyboard
        )
    ctx.storage.clear()


# –ò–≥—Ä–∞ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
@bp.on.private_message(payload={'games': 'tsuefa'})
async def start_tsuefa(message: Message):
    await bp.state_dispenser.set(message.peer_id, Tsuefa.START)
    await message.answer(f"–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞. –¶—É-–µ-—Ñ–∞!", keyboard=games_kb.tsuefa_keyboard)


@bp.on.message(state=Tsuefa.START)
async def tsuefa_game(message: Message):
    if message.payload:
        player_sign = json.loads(message.payload)['tsuefa']
        bot_sign = {1: "–ö–∞–º–µ–Ω—å", 2: "–ù–æ–∂–Ω–∏—Ü—ã", 3: "–ë—É–º–∞–≥–∞"}[random.randint(1, 3)]
        if player_sign == "–ö–∞–º–µ–Ω—å":
            if bot_sign == "–ö–∞–º–µ–Ω—å":
                await message.answer(f"üëä–ö–∞–º–µ–Ω—å! –ù–∏—á—å—è üòè", keyboard=games_menu_keyboard)
            elif bot_sign == "–ù–æ–∂–Ω–∏—Ü—ã":
                await message.answer(f"‚úå–ù–æ–∂–Ω–∏—Ü—ã! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üòâ", keyboard=games_menu_keyboard)
            elif bot_sign == "–ë—É–º–∞–≥–∞":
                await message.answer(f"‚úã–ë—É–º–∞–≥–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòï", keyboard=games_menu_keyboard)
        elif player_sign == "–ù–æ–∂–Ω–∏—Ü—ã":
            if bot_sign == "–ö–∞–º–µ–Ω—å":
                await message.answer(f"üëä–ö–∞–º–µ–Ω—å! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòï", keyboard=games_menu_keyboard)
            elif bot_sign == "–ù–æ–∂–Ω–∏—Ü—ã":
                await message.answer(f"‚úå–ù–æ–∂–Ω–∏—Ü—ã! –ù–∏—á—å—è üòè", keyboard=games_menu_keyboard)
            elif bot_sign == "–ë—É–º–∞–≥–∞":
                await message.answer(f"‚úã–ë—É–º–∞–≥–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üòâ", keyboard=games_menu_keyboard)
        elif player_sign == "–ë—É–º–∞–≥–∞":
            if bot_sign == "–ö–∞–º–µ–Ω—å":
                await message.answer(f"üëä–ö–∞–º–µ–Ω—å! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üòâ", keyboard=games_menu_keyboard)
            elif bot_sign == "–ù–æ–∂–Ω–∏—Ü—ã":
                await message.answer(f"‚úå–ù–æ–∂–Ω–∏—Ü—ã! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòï", keyboard=games_menu_keyboard)
            elif bot_sign == "–ë—É–º–∞–≥–∞":
                await message.answer(f"‚úã–ë—É–º–∞–≥–∞! –ù–∏—á—å—è üòè", keyboard=games_menu_keyboard)
        elif player_sign == '‚óÄ –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä':
            await message.answer(f'–°–ø–∏—Å–æ–∫ –∏–≥—Ä', keyboard=games_menu_keyboard)
        await bp.state_dispenser.delete(message.peer_id)
    else:
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", keyboard=games_kb.tsuefa_keyboard)


# –ò–≥—Ä–∞ –º–æ–Ω–µ—Ç–∫–∞
@bp.on.private_message(payload={'games': 'coinflip'})
async def start_coin_flip(message: Message):
    await bp.state_dispenser.set(message.peer_id, CoinFlip.START)
    await message.answer(f"–ò–≥—Ä–∞ ¬´–ú–æ–Ω–µ—Ç–∫–∞¬ª", keyboard=games_kb.coin_flip_keyboard)


@bp.on.private_message(state=CoinFlip.START)
async def coin_flip_game(message: Message):
    if message.payload:
        answer = json.loads(message.payload)["coin_flip"]
        if message.payload == "back":
            await bp.state_dispenser.delete(message.peer_id)
            await message.answer(f'–°–ø–∏—Å–æ–∫ –∏–≥—Ä', keyboard=games_menu_keyboard)
        else:
            another_side = "–†–µ—à–∫–∞" if answer == "–û—Ä–µ–ª" else "–û—Ä–µ–ª"
            if random.randint(1, 2) == 1:
                await message.answer(f"ü•≥ {answer}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!",  keyboard=games_menu_keyboard)
            else:
                await message.answer(f"üòï {another_side}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", keyboard=games_menu_keyboard)
            await bp.state_dispenser.delete(message.peer_id)
