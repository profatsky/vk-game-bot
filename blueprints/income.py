import json
from datetime import datetime, timedelta

from vkbottle.bot import Blueprint, Message
from vkbottle.tools import Keyboard, Text

from loader import db
from blueprints.main_menu import profile
from blueprints.shop import mining_shop
from keyboards import income_kb
from states import SellCard

bp = Blueprint()


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bp.on.private_message(payload={'income_menu': 'mining'})
async def mining_menu(message: Message):
    if await db.request(f"SELECT * FROM mining "
                        f"WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {message.from_id})", "result"):
        await profile(
            message=message,
            text='üìº –í–∞—à–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã',
            kb=income_kb.mining_keyboard
        )
    else:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ üè¨")
        await mining_shop(message)


# –ü–æ–ª—É—á–µ–Ω–∏ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
async def get_card_income(message: Message, video_card: str, cards_amount: int):
    start_mining_date = (await db.request(
        f"SELECT low_card, medium_card, high_card FROM mining "
        f"WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {message.from_id})"))[video_card]

    # –£–∑–Ω–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ä—Ç–∞ –º–∞–π–Ω–∏–ª–∞
    mining_time = datetime.now() - start_mining_date
    # –£–∑–Ω–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∫–∞—Ä—Ç–∞ –º–∞–π–Ω–∏–ª–∞
    number_of_hours = int(mining_time / timedelta(hours=1))
    # –£–∑–Ω–∞–µ–º –¥–æ—Ö–æ–¥ –æ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    income_from = {"low_card": 25, "medium_card": 80, "high_card": 250}
    income_from_the_card = number_of_hours * income_from[video_card] * cards_amount
    if income_from_the_card:
        # –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∫–∞—Ä—Ç–∞ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ —á–∞—Å–æ–≤
        remaining_minutes = (mining_time - timedelta(hours=number_of_hours)) / timedelta(minutes=1)
        # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
        start_time = datetime.now() - timedelta(minutes=remaining_minutes)
        await db.request(f'UPDATE mining SET {video_card} = "{start_time}" '
                         f'WHERE user_id = (SELECT user_id FROM users WHERE vk_id = {message.from_id})')
        await message.answer(
            f"–î–æ—Ö–æ–¥ –æ—Ç –≤–µ–¥–µ–æ–∫–∞—Ä—Ç(—ã) ¬´{video_card.split('_')[0].capitalize()}¬ª —Å–æ—Å—Ç–∞–≤–∏–ª ${income_from_the_card}"
        )
    else:
        await message.answer(f"‚ùå –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞(-—ã) ¬´{video_card.split('_')[0].capitalize()}¬ª –Ω–µ –ø—Ä–∏–Ω–µ—Å–ª–∞(-–∏) –¥–æ—Ö–æ–¥–∞")
    return income_from_the_card


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
@bp.on.private_message(payload={'mining_menu': 'get_income'})
async def get_mining_income(message: Message):
    slots = await db.request(f"SELECT slot_1, slot_2, slot_3 FROM users WHERE vk_id = {message.from_id}")
    no_cards_amount = sum(map(lambda card: card == "no_card", slots.values()))
    general_income = 0
    if no_cards_amount != 3:
        low_cards_amount = sum(map(lambda card: card == "low_card", slots.values()))
        if low_cards_amount:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Low
            income_from_low = await get_card_income(
                message=message,
                video_card="low_card",
                cards_amount=low_cards_amount
            )
            general_income += income_from_low

        medium_cards_amount = sum(map(lambda card: card == "medium_card", slots.values()))
        if medium_cards_amount:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Medium
            income_from_medium = await get_card_income(
                message=message,
                video_card="medium_card",
                cards_amount=medium_cards_amount
            )
            general_income += income_from_medium

        high_cards_amount = sum(map(lambda card: card == "high_card", slots.values()))
        if high_cards_amount:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ High
            income_from_high = await get_card_income(
                message=message,
                video_card="high_card",
                cards_amount=high_cards_amount
            )
            general_income += income_from_high

        await db.request(f"UPDATE users SET balance = balance + {general_income} WHERE vk_id = {message.from_id}")
        await message.answer(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç —Å–æ—Å—Ç–∞–≤–∏–ª ${general_income}")
    else:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ üè¨")
        await mining_shop(message)


# –ü—Ä–æ–¥–∞–∂–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
@bp.on.private_message(payload={'mining_menu': 'sell_cards'})
async def sell_video_card_menu(message: Message):
    slots = await db.request(f"SELECT slot_1, slot_2, slot_3 FROM users WHERE vk_id = {message.from_id}")
    cards_list = {"low_card": 750, "medium_card": 3750, "high_card": 12500}  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∫–∞–∂–¥–æ–π –∏–∑ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    text = ""
    kb = Keyboard(one_time=False, inline=False)
    count = 1
    for slot, card in slots.items():
        if card != "no_card":
            text += f"{count}. {card.split('_')[0].capitalize()} - ${cards_list[card]}\n"
            kb.add(Text(
                f"{count}. {card.split('_')[0].capitalize()}",
                payload={"sell_cards": (slot, card, cards_list[card])}
            ))
            count += 1

    if text:
        kb.row().add(Text("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–¥–∞–∂–∏", payload={"sell_cards": "refuse"}))
        await message.answer(f"üñ• –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:\n\n{text}", keyboard=kb.get_json())
        await bp.state_dispenser.set(peer_id=message.peer_id, state=SellCard.SELL)
    else:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ üè¨")
        await mining_shop(message)


@bp.on.private_message(state=SellCard.SELL)
async def sell_video_card(message: Message):
    if message.payload:
        answer = json.loads(message.payload)["sell_cards"]
        if answer == "refuse":  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
            await message.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã")
            await bp.state_dispenser.delete(peer_id=message.peer_id)
            await mining_menu(message)
        else:
            slot, card_name, money = answer
            await db.request(
                f'UPDATE users JOIN mining USING (user_id) '
                f'SET balance = balance + {money}, users.{slot} = "no_card", mining.{card_name} = NULL '
                f'WHERE vk_id = {message.from_id}'
            )
            await message.answer(f"üí∞ –í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É {card_name.split('_')[0].capitalize()} –∑–∞ ${money}")
            await bp.state_dispenser.delete(peer_id=message.peer_id)
            await mining_menu(message)
    else:
        await message.answer("‚ùó –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!")
